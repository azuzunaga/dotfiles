# ----------------------
# Bash Functions
# ----------------------

# Create a directory and cd into it
function mkcd () {
  mkdir "$1"
  cd "$1"
}

# cd into directory and list contents
function cl () {
  cd "$1"
  ll
}

# Unzip files and remove the __MACOSX folder
function uzp () {
  unzip -q "$1"
  rm -rf __MACOSX
  ll
}

# Display folder contents after removing files
function rml () {
  rm "$1" "$2"
  ll
}

# Repeat any command every second
function repeat_command() {
  while [ 0 ]
  do "$@"
  sleep 1
  done
}

# make `c` behave like `code .` with no args, or `code` with args
function c () {
  if [ $# -eq 0 ]
  then
    code .
  else
    code "$@"
  fi
}

# make 'k' behave like `kill %1` with no args, or `kill %<n>` with args
function k () {
  if [ $# -eq 0 ]
  then
    kill %1
  else
    kill %"$@"
  fi
}

# make 'bg' behave like `bg %1` with no args, or `bg %<n>` with args
function bg () {
  if [ $# -eq 0 ]
  then
    bg %1
  else
    bg %"$@"
  fi
}

# make 'fg' behave like `fg %1` with no args, or `fg %<n>` with args
function fg () {
  if [ $# -eq 0 ]
  then
    fg %1
  else
    fg %"$@"
  fi
}

# Watch GitHub PR status
function watch_pr () {
  gh pr checks "$@" --watch
  tput bel
}

# ----------------------
# Git Functions
# ----------------------

# Git log find by commit message
function glf () {
  git log --all --grep="$1"
}

# Git add local files and display status
function ga. () {
  git add .
  echo -e $gs_message
  git status
}

# Git push and display status
function gps () {
  git push
  echo -e $gs_message
  git status
}

# Git pull and display status
function gpl () {
  git pull
  echo -e $gs_message
  git status
}

# make `g` behave like `git status` with no args, or `git` with args
function g () {
  if [ $# -eq 0 ]
  then
    echo -e $gs_message
    git status
  else
    git "$@"
  fi
}
# __git_complete g _git

# make a git function to commit and display status
function gcms () {
  git commit -m "$1"
  echo -e $gs_message
  git status
}

function git-parent () {
  git show-branch | grep "*" | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'
}

# Nix functions
nixify() {
  if [ ! -e ./.envrc ]; then
    echo "use nix --system x86_64-darwin" > .envrc
  fi
  if [[ ! -e shell.nix ]] && [[ ! -e default.nix ]]; then
    cat > shell.nix <<'EOF'
with import <nixpkgs> {};
mkShell {
  nativeBuildInputs = [
     bashInteractive
  ];
}
EOF
    ${EDITOR:-vim} shell.nix
  fi
}
