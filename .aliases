#!/bin/bash

#### General Shortcuts ####

ali=/Users/az/.aliases
alias sl="ls"
alias ls='/usr/local/bin/gls --color --group-directories-first'
alias irb="pry"
alias be="bundle exec"
alias cat="ccat -G Decimal="darkteal"  -G Plaintext="darkgreen""
alias ber="bundle exec rspec"
alias u="cd ..;ll"
alias nd="cd -"
alias dirs="dirs -v"
alias atom="atom ."
alias ali="nano $ali"
alias hist="history"
alias ll='ls -AFHls --si'
alias ldir="ls -dl .*/ */"
alias clear_history='echo "" > ~/.zsh_history & exec $SHELL -l'
alias sor="source ~/.zshrc"
alias snx="spotify next"
alias spv="spotify prev"
alias spp="spotify pause"
# Make LESS display file contents inline if page size is only one screen
alias less="/usr/local/bin/smartless"

# ----------------------
# Bash Functions
# ----------------------
# Create a function to show dirs first

# Create a funtion to mkdir and cd into newly created dir
function mkcd () {
  mkdir "$1"
  cd "$1"
}

# Create a function to cd into directory and list contents
function cl () {
  cd "$1"
  ll
}

# Create a function to unzip files and remove the __MACOSX folder
function uzp () {
  unzip -q "$1"
  rm -rf __MACOSX
  ll
}

# Create a function to display folder contents after removing files
function rml () {
  rm "$1" "$2"
  ll
}


#### git variables ####
gs_message="\n\033[0;34m╭───────────────── git status ─────────────────╮\033[0m\n"

#### git shortcuts ####
alias gpom="git push origin master"
alias gcom="git commit -m"
alias gds="git dif --staged"
alias gd="git status;git diff"
alias grao="git remote add origin"
alias gc="git clone"
alias gb='git branch'
alias gco='git checkout'
alias gi='git init'
alias glg='git log --graph --oneline --decorate --all'
alias gld='git log --pretty=format:"%h %ad %s" --date=short --all'
alias gr='git rebase'
alias gs='git status --short'

# ----------------------
# Git Functions
# ----------------------
# Git log find by commit message
function glf() { git log --all --grep="$1"; }

# Git add local files and display status
function ga. () {
  git add .
  echo -e $gs_message
  git status
}

# Git push and display status
function gps () {
  git push
  echo -e $gs_message
  git status
}

# Git pull and display status
function gpl () {
  git pull
  echo -e $gs_message
  git status
}


# make `g` behave like `git status` with no args, or `git` with args
function g () {
  if [ $# -eq 0 ]
  then
    echo -e $gs_message
    git status
  else
    git "$@"
  fi
}
# __git_complete g _git

# make a git function to commit and display status
function gcms () {
  git commit -m "$1"
  echo -e $gs_message
  git status
}
